{"version":3,"sources":["Joke.js","JokesList.js","App.js","serviceWorker.js","index.js"],"names":["Joke","this","props","votes","className","onClick","upvote","style","borderColor","getColor","downvote","text","getEmoji","Component","JokesList","state","loading","jokes","JSON","parse","window","localStorage","getItem","setJokes","Set","map","j","handleClick","bind","length","setState","getJokes","numJokes","axios","get","headers","Accept","res","newJoke","data","joke","has","push","id","v4","st","setItem","stringify","delta","sort","a","b","alt","src","key","handleVote","defaultProps","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3b26ebbe.chunk.js","sourcesContent":["import React,{ Component } from 'react'\nimport './Joke.css';\n\nclass Joke extends Component{\n    getColor() {\n        if (this.props.votes >= 15) {\n          return \"#4CAF50\";\n        } else if (this.props.votes >= 12) {\n          return \"#8BC34A\";\n        } else if (this.props.votes >= 9) {\n          return \"#CDDC39\";\n        } else if (this.props.votes >= 6) {\n          return \"#FFEB3B\";\n        } else if (this.props.votes >= 3) {\n          return \"#FFC107\";\n        } else if (this.props.votes >= 0) {\n          return \"#FF9800\";\n        } else {\n          return \"#f44336\";\n        }\n      }\n      getEmoji() {\n        if (this.props.votes >= 15) {\n          return \"em em-rolling_on_the_floor_laughing\";\n        } else if (this.props.votes >= 12) {\n          return \"em em-laughing\";\n        } else if (this.props.votes >= 9) {\n          return \"em em-smiley\";\n        } else if (this.props.votes >= 6) {\n          return \"em em-slightly_smiling_face\";\n        } else if (this.props.votes >= 3) {\n          return \"em em-neutral_face\";\n        } else if (this.props.votes >= 0) {\n          return \"em em-confused\";\n        } else {\n          return \"em em-angry\";\n        }\n      }\n    render(){\n        \n        return(\n            <div className=\"Joke\">\n                <div className=\"Joke-buttons\">\n                    <i className=\"fas fa-arrow-up\" onClick={this.props.upvote}></i>\n                    <span className=\"Joke-votes\" style={{borderColor:this.getColor()}}>{this.props.votes}</span>\n                    <i className=\"fas fa-arrow-down\" onClick={this.props.downvote}></i>\n                </div>\n                <div className=\"Joke-text\">\n                    {\n                        this.props.text\n                    }\n                </div>\n                <div className=\"Joke-smiley\">\n                <i className={this.getEmoji()}></i>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Joke;","import React, { Component } from \"react\";\nimport { v4 } from \"uuid\";\nimport axios from \"axios\";\nimport \"./JokesList.css\";\nimport Joke from \"./Joke\";\n\nclass JokesList extends Component {\n  static defaultProps = {\n    numJokes: 10,\n  };\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      jokes: JSON.parse(window.localStorage.getItem(\"jokes\") || \"[]\"),\n    };\n    this.setJokes = new Set(this.state.jokes.map((j) => j.text));\n    this.handleClick = this.handleClick.bind(this);\n  }\n  async componentDidMount() {\n    if (this.state.jokes.length === 0) {\n      this.setState({ loading: true }, this.getJokes);\n    }\n  }\n  async getJokes() {\n    let jokes = [];\n    while (jokes.length < this.props.numJokes) {\n      let res = await axios.get(\"https://icanhazdadjoke.com/\", {\n        headers: {\n          Accept: \"application/json\",\n        },\n      });\n      let newJoke = res.data.joke;\n      if (!this.setJokes.has(newJoke))\n        jokes.push({ id: v4(), text: newJoke, votes: 0 });\n    }\n    this.setState(\n      (st) => ({\n        loading: false,\n        jokes: [...st.jokes, ...jokes],\n      }),\n      () =>\n        window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes))\n    );\n  }\n  handleVote(id, delta) {\n    this.setState(\n      (st) => ({\n        jokes: st.jokes.map((j) =>\n          j.id === id ? { ...j, votes: j.votes + delta } : j\n        ),\n      }),\n      () =>\n        window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes))\n    );\n  }\n  handleClick() {\n    this.setState({ loading: true }, this.getJokes);\n  }\n  render() {\n    if (this.state.loading) {\n      return (\n        <div className=\"spinner\">\n          <i className=\"far fa-8x fa-laugh fa-spin\" />\n          <h1 className=\"JokeList-title\">Loading...</h1>\n        </div>\n      );\n    }\n    let jokes = this.state.jokes.sort((a, b) => b.votes - a.votes);\n    return (\n      <div className=\"JokesList\">\n        <div className=\"JokesList-sidebar\">\n          <h1 className=\"JokesList-title\">Dad Jokes</h1>\n          <img\n            className=\"JokesList-img\"\n            alt=\"JokesList-img\"\n            src=\"https://assets.dryicons.com/uploads/icon/svg/8927/0eb14c71-38f2-433a-bfc8-23d9c99b3647.svg\"\n          />\n          <button className=\"JokesList-getmore\" onClick={this.handleClick}>\n            Fetch Jokes\n          </button>\n        </div>\n        <div className=\"JokesList-jokes\">\n          {jokes.map((j) => (\n            <Joke\n              key={j.id}\n              votes={j.votes}\n              text={j.text}\n              upvote={() => this.handleVote(j.id, 1)}\n              downvote={() => this.handleVote(j.id, -1)}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default JokesList;\n","import React from 'react';\nimport JokesList from './JokesList';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <JokesList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}